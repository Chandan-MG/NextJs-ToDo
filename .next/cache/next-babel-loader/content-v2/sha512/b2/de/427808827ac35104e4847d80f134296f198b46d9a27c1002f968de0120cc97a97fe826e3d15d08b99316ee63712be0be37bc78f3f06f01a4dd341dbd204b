{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"D:/chandan/Sharpener projects/NextJS/todo/01-starting-project/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/chandan/Sharpener projects/NextJS/todo/01-starting-project/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"D:\\\\chandan\\\\Sharpener projects\\\\NextJS\\\\todo\\\\01-starting-project\\\\pages\\\\todo-done\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport classes from './todo-done.module.css';\nimport { RxTrash } from \"react-icons/rx\";\n\nfunction TodoDone(_ref) {\n  _s();\n\n  var _this = this;\n\n  var doneList = _ref.doneList;\n\n  // const [listItem, setListItem] = useState(DUMMY_ITEM);\n  var _useState = useState(false),\n      isDeleting = _useState[0],\n      setIsDeleting = _useState[1];\n\n  var deleteHandler = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsDeleting(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"https://crudcrud.com/api/4307f38ee7274e5fa30e6ef92ac1d952/todo-done/\".concat(id), {\n                method: 'DELETE'\n              });\n\n            case 4:\n              response = _context.sent;\n\n              if (response.ok) {\n                // If deletion is successful, you can perform any necessary cleanup or UI updates\n                console.log('Item deleted successfully'); // Example: Refreshing the todo list after deletion\n\n                window.location.reload();\n              } else {\n                console.error('Failed to delete item:', response.status);\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error('Error deleting item:', _context.t0);\n\n            case 11:\n              _context.prev = 11;\n              setIsDeleting(false);\n              return _context.finish(11);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8, 11, 14]]);\n    }));\n\n    return function deleteHandler() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: doneList.map(function (item) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.card,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.name,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"delete\"],\n          children: /*#__PURE__*/_jsxDEV(RxTrash, {\n            color: \"red\",\n            style: {\n              width: '30px',\n              height: '30px'\n            },\n            onClick: deleteHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, _this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TodoDone, \"PcvudgQ4pB1b8YUmRhNmcS3boU8=\");\n\n_c = TodoDone;\nexport var __N_SSG = true;\nexport default TodoDone;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoDone\");","map":{"version":3,"sources":["D:/chandan/Sharpener projects/NextJS/todo/01-starting-project/pages/todo-done/index.js"],"names":["useState","classes","RxTrash","TodoDone","doneList","isDeleting","setIsDeleting","deleteHandler","fetch","id","method","response","ok","console","log","window","location","reload","error","status","map","item","card","name","width","height"],"mappings":";;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAIA,SAASC,QAAT,OAA+B;AAAA;;AAAA;;AAAA,MAAXC,QAAW,QAAXA,QAAW;;AAE3B;AAF2B,kBAISJ,QAAQ,CAAC,KAAD,CAJjB;AAAA,MAIpBK,UAJoB;AAAA,MAIRC,aAJQ;;AAM3B,MAAMC,aAAa;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBD,cAAAA,aAAa,CAAC,IAAD,CAAb;AADkB;AAAA;AAAA,qBAGSE,KAAK,+EAAwEC,EAAxE,GAA8E;AACtGC,gBAAAA,MAAM,EAAE;AAD8F,eAA9E,CAHd;;AAAA;AAGRC,cAAAA,QAHQ;;AAMd,kBAAIA,QAAQ,CAACC,EAAb,EAAiB;AACb;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAFa,CAGb;;AACAC,gBAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,eALD,MAKO;AACHJ,gBAAAA,OAAO,CAACK,KAAR,CAAc,wBAAd,EAAwCP,QAAQ,CAACQ,MAAjD;AACH;;AAba;AAAA;;AAAA;AAAA;AAAA;AAedN,cAAAA,OAAO,CAACK,KAAR,CAAc,sBAAd;;AAfc;AAAA;AAiBdZ,cAAAA,aAAa,CAAC,KAAD,CAAb;AAjBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbC,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAoBA,sBACI;AAAA,cACKH,QAAQ,CAACgB,GAAT,CAAa,UAAAC,IAAI;AAAA,0BACd;AAAK,QAAA,SAAS,EAAEpB,OAAO,CAACqB,IAAxB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAErB,OAAO,CAACsB,IAAxB;AAAA,iCACI;AAAA,sBAAKF,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,iBADJ,eAII;AAAK,UAAA,SAAS,EAAEtB,OAAO,UAAvB;AAAA,iCACI,QAAC,OAAD;AAAS,YAAA,KAAK,EAAC,KAAf;AAAqB,YAAA,KAAK,EAAE;AAAEuB,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,MAAM,EAAE;AAAzB,aAA5B;AAA+D,YAAA,OAAO,EAAElB;AAAxE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,iBAJJ;AAAA,SAAmCc,IAAI,CAACZ,EAAxC;AAAA;AAAA;AAAA;AAAA,eADc;AAAA,KAAjB;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAxCQN,Q;;KAAAA,Q;;AA+DT,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\r\nimport classes from './todo-done.module.css';\r\nimport { RxTrash } from \"react-icons/rx\";\r\n\r\n\r\n\r\nfunction TodoDone({ doneList }){\r\n    \r\n    // const [listItem, setListItem] = useState(DUMMY_ITEM);\r\n\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n    const deleteHandler = async () => {\r\n        setIsDeleting(true);\r\n        try {\r\n            const response = await fetch(`https://crudcrud.com/api/4307f38ee7274e5fa30e6ef92ac1d952/todo-done/${id}`, {\r\n                method: 'DELETE'\r\n            });\r\n            if (response.ok) {\r\n                // If deletion is successful, you can perform any necessary cleanup or UI updates\r\n                console.log('Item deleted successfully');\r\n                // Example: Refreshing the todo list after deletion\r\n                window.location.reload();\r\n            } else {\r\n                console.error('Failed to delete item:', response.status);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting item:', error);\r\n        } finally {\r\n            setIsDeleting(false);\r\n        }\r\n    };\r\n    return(\r\n        <div>\r\n            {doneList.map(item => (\r\n                <div className={classes.card} key={item.id}>\r\n                    <div className={classes.name}>\r\n                        <h3>{item.name}</h3>\r\n                    </div>\r\n                    <div className={classes.delete}>\r\n                        <RxTrash color=\"red\" style={{ width: '30px', height: '30px' }} onClick={deleteHandler} />\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport async function getStaticProps() {\r\n    try {\r\n      const response = await fetch(`https://crudcrud.com/api/4307f38ee7274e5fa30e6ef92ac1d952/todo-input`);\r\n      if (response.ok) {\r\n        const doneList = await response.json();\r\n        return { \r\n          props: { \r\n            doneList \r\n          } \r\n        };\r\n      } else {\r\n        console.error(\"Failed to fetch data:\", response.status);\r\n        return { props: { doneList: [] } };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching:\", error);\r\n      return { props: { todoList: [] } };\r\n    }\r\n}\r\n\r\nexport default TodoDone;"]},"metadata":{},"sourceType":"module"}